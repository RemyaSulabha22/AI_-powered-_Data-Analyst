import json
import tempfile
import csv
import streamlit as st
import pandas as pd
from agno.models.openai import OpenAIChat
from phi.agent.duckdb import DuckDbAgent
from agno.tools.pandas import PandasTools
import re

# Function to preprocess and save the uploaded file
def preprocess_and_save(file):
    try:
        if file.name.endswith('.csv'):
            df = pd.read_csv(file, encoding='utf-8', na_values=['NA', 'N/A', 'missing'])
        elif file.name.endswith('.xlsx'):
            df = pd.read_excel(file, na_values=['NA', 'N/A', 'missing'])
        else:
            st.error("Unsupported file format. Please upload a CSV or Excel file.")
            return None, None, None
        
        # Clean and parse data
        for col in df.select_dtypes(include=['object']):
            df[col] = df[col].astype(str).replace({r'"': '""'}, regex=True)

        for col in df.columns:
            if 'date' in col.lower():
                df[col] = pd.to_datetime(df[col], errors='coerce')
            elif df[col].dtype == 'object':
                try:
                    df[col] = pd.to_numeric(df[col])
                except (ValueError, TypeError):
                    pass

        # Save to temp CSV
        with tempfile.NamedTemporaryFile(delete=False, suffix=".csv") as temp_file:
            temp_path = temp_file.name
            df.to_csv(temp_path, index=False, quoting=csv.QUOTE_ALL)

        return temp_path, df.columns.tolist(), df
    except Exception as e:
        st.error(f"Error processing file: {e}")
        return None, None, None


# --- Streamlit App ---
st.set_page_config(page_title="üìä InsightGenie", layout="wide")
st.title("üìä InsightGenie: Ask Your Data Anything")

# API Key Input
with st.sidebar:
    st.header("üîê API Configuration")
    openai_key = st.text_input("Enter OpenAI API key:", type="password")
    if openai_key:
        st.session_state.openai_key = openai_key
        st.success("API key saved.")
    else:
        st.warning("Please enter your OpenAI API key.")

# File Upload
uploaded_file = st.file_uploader("üìÇ Upload your CSV or Excel file", type=["csv", "xlsx"])

if uploaded_file and "openai_key" in st.session_state:
    temp_path, columns, df = preprocess_and_save(uploaded_file)
    
    if temp_path and df is not None:
        st.subheader("üìÑ Uploaded Dataset")
        st.dataframe(df, use_container_width=True)
        st.markdown("**Available Columns:** " + ", ".join(columns))

        # Option to view summary stats
        with st.expander("üìà View Summary Statistics"):
            st.write(df.describe(include='all'))

        # Sample Questions
        sample_qs = [f"What is the average of {col}?" for col in columns[:3]]
        st.markdown("üí¨ Example Questions:")
        for q in sample_qs:
            st.markdown(f"- {q}")

        # Semantic model
        semantic_model = {
            "tables": [{
                "name": "uploaded_data",
                "description": "This is the uploaded dataset.",
                "path": temp_path,
            }]
        }

        duckdb_agent = DuckDbAgent(
            model=OpenAIChat(model="gpt-4", api_key=st.session_state.openai_key),
            semantic_model=json.dumps(semantic_model),
            tools=[PandasTools()],
            markdown=True,
            add_history_to_messages=False,
            followups=False,
            read_tool_call_history=False,
            system_prompt="You are a senior data analyst. Convert user queries into optimized SQL queries and return both the SQL and final result. Enclose SQL in ```sql```."
        )

        # Initialize session history
        if "query_history" not in st.session_state:
            st.session_state.query_history = []

        # Query Input
        st.subheader("üîç Ask Your Question")
        user_query = st.text_area("Type your question about the data")

        if st.button("üöÄ Run Query"):
            if not user_query.strip():
                st.warning("Please enter a valid query.")
            else:
                with st.spinner("Processing your query..."):
                    try:
                        response = duckdb_agent.run(user_query)
                        content = getattr(response, 'content', str(response))
                        response_print = duckdb_agent.print_response(user_query, stream=True)

                        st.session_state.query_history.append((user_query, content))

                        # Extract SQL and Result
                        sql_match = re.search(r"```sql(.*?)```", content, re.DOTALL)
                        if sql_match:
                            sql_code = sql_match.group(1).strip()
                            st.markdown("üß† **Generated SQL Query:**")
                            st.code(sql_code, language="sql")
                        st.markdown("üìä **Result:**")
                        st.markdown(content)

                    except Exception as e:
                        st.error(f"Failed to process the query: {e}")

        # Show past Q&A
        if st.session_state.query_history:
            with st.expander("üìú Query History"):
                for q, a in reversed(st.session_state.query_history[-5:]):
                    st.markdown(f"**Q:** {q}")
                    st.markdown(f"**A:** {a}")
                    st.markdown("---")
